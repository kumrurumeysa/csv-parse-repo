name: Build, Test and Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: 235911282591.dkr.ecr.eu-central-1.amazonaws.com/case
  IMAGE_TAG: ${{ github.run_number }}
  CLUSTER_NAME: csv-case-cluster
  HELM_RELEASE: csv-web
  HELM_NAMESPACE: case

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: csv-web-app/package-lock.json

      - name: Install dependencies
        run: |
          cd csv-web-app
          npm ci

      - name: Run linting
        run: |
          cd csv-web-app
          npm run lint

      - name: Run unit tests
        run: |
          cd csv-web-app
          npm test

      - name: Run integration tests
        run: |
          cd csv-web-app
          npm run test:integration

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: csv-web-app/coverage/
          retention-days: 7

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::235911282591:role/github-actions-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:${IMAGE_TAG} ./csv-web-app

      - name: Run container tests
        run: |
          docker run --rm $ECR_REPOSITORY:${IMAGE_TAG} npm test

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REPOSITORY:${IMAGE_TAG}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      
      - name: Setup Helm
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Create namespace if not exists
        run: |
          kubectl create namespace $HELM_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        run: |
          helm upgrade --install $HELM_RELEASE ./csv-web-helm \
            --namespace $HELM_NAMESPACE \
            --set image.web.repository=$ECR_REPOSITORY \
            --set image.web.tag=${IMAGE_TAG} \
            --wait

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/$HELM_RELEASE -n $HELM_NAMESPACE
          
          # Get service URL
          SERVICE_URL=$(kubectl get svc $HELM_RELEASE -n $HELM_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run basic health check
          curl -f http://$SERVICE_URL/ || exit 1

      - name: Verify deployment
        run: |
          kubectl get pods -n $HELM_NAMESPACE
          kubectl get svc -n $HELM_NAMESPACE
          kubectl get ingress -n $HELM_NAMESPACE

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'csv-web-app/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 